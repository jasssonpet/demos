// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var J,
    __hasProp = {}.hasOwnProperty;

  J = (function() {
    var getAttribute, removeAttribute, setAttribute;
    J = (function() {
      var arrayOfObjectsConstructor, createHtmlElementConstructor, htmlElementConstructor, selectorConstructor, voidTag;
      voidTag = /^<(\w+)\s?\/>$/;
      createHtmlElementConstructor = function(voidTag) {
        var htmlElement, tagName;
        tagName = voidTag.match(voidTag)[1];
        htmlElement = document.createElement(tagName);
        return htmlElementConstructor.call(this, htmlElement);
      };
      htmlElementConstructor = function(htmlElement) {
        return arrayOfObjectsConstructor.call(this, [htmlElement]);
      };
      arrayOfObjectsConstructor = function(objects) {
        return J.merge(this, objects);
      };
      selectorConstructor = function(selector, context) {
        var _this = this;
        if (context == null) {
          context = [document];
        }
        return J.each(context, function() {
          return arrayOfObjectsConstructor.call(_this, _this.querySelectorAll(selector));
        });
      };
      return function(selector, context) {
        if (!(this instanceof J)) {
          return new J(selector, context);
        }
        this.length = 0;
        switch (selector) {
          case !(selector != null):
            return this;
          case voidTag.test(selector):
            return createHtmlElementConstructor.call(this, selector);
          case selector instanceof HTMLElement:
            return htmlElementConstructor.call(this, selector);
          case Array.isArray(selector):
            return arrayOfObjectsConstructor.call(this, selector);
          default:
            return selectorConstructor.call(this, selector, context);
        }
      };
    })();
    J.repeat = function(string, times) {
      var i, result, _i;
      result = '';
      for (i = _i = 0; 0 <= times ? _i <= times : _i >= times; i = 0 <= times ? ++_i : --_i) {
        result += string;
      }
      return result;
    };
    (function() {
      var makeMissing;
      makeMissing = function(string, length, character) {
        if (character == null) {
          character = ' ';
        }
        return J.repeat(character, length - string.length);
      };
      J.padLeft = function(string, length, character) {
        return makeMissing(string, length, character) + string;
      };
      return J.padRight = function(string, length, character) {
        return string + makeMissing(string, length, character);
      };
    })();
    (function() {
      var initialize, insert, isArrayLike;
      isArrayLike = function() {
        return 'length' in this;
      };
      initialize = function() {
        if (isArrayLike.call(this)) {
          return [];
        } else {
          return {};
        }
      };
      insert = function(property, value) {
        if (isArrayLike.call(this)) {
          return this.push(value);
        } else {
          return this[property] = value;
        }
      };
      J.each = (function() {
        var eachArray, eachObject;
        eachArray = function(callback) {
          var i, _i, _ref;
          for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (callback.call(this[i], i) === false) {
              break;
            }
          }
          return this;
        };
        eachObject = function(callback) {
          var i;
          for (i in this) {
            if (!__hasProp.call(this, i)) continue;
            if (callback.call(this[i], i) === false) {
              break;
            }
          }
          return this;
        };
        return function(object, callback) {
          return (isArrayLike.call(object) ? eachArray : eachObject).call(object, callback);
        };
      })();
      J.map = J.select = function(object, callback) {
        var result;
        result = initialize.call(object);
        J.each(object, function(i) {
          var mapped;
          mapped = callback.call(this, i);
          return insert.call(result, i, mapped);
        });
        return result;
      };
      (function() {
        var invertPredicate;
        invertPredicate = function(callback) {
          return function() {
            return !callback.apply(this, arguments);
          };
        };
        J.filter = J.where = function(object, callback) {
          var result;
          result = initialize.call(object);
          J.each(object, function(i) {
            if (callback.call(this, i)) {
              return insert.call(result, i, this);
            }
          });
          return result;
        };
        J.reject = function(object, callback) {
          return J.filter(object, invertPredicate(callback));
        };
        J.any = J.some = function(object, callback) {
          var result;
          result = false;
          J.each(object, function(i) {
            if (callback.call(this, i)) {
              result = true;
              return false;
            }
          });
          return result;
        };
        return J.all = J.every = function(object, callback) {
          return !J.any(object, invertPredicate(callback));
        };
      })();
      J.uniq = function(object) {
        var result;
        result = initialize.call(object);
        J.each(object, function(i) {
          if (!J.contains(result, this)) {
            return insert.call(result, i, this);
          }
        });
        return result;
      };
      return J.merge = function(object, elements) {
        J.each(elements, function(i) {
          return insert.call(object, i, this);
        });
        return object;
      };
    })();
    J.contains = function(object, element) {
      return J.any(object, function() {
        return this === element;
      });
    };
    J.pluck = function(object, property) {
      return J.map(object, function() {
        return this[property];
      });
    };
    (function() {
      var minMax;
      minMax = function(callback) {
        var result;
        result = callback();
        J.each(this, function() {
          return result = callback(this, result);
        });
        return result;
      };
      J.min = function(object) {
        return minMax.call(object, Math.min);
      };
      return J.max = function(object) {
        return minMax.call(object, Math.max);
      };
    })();
    J.shuffle = (function() {
      var swap;
      swap = function(array, i, j) {
        var _ref;
        return _ref = [array[j], array[i]], array[i] = _ref[0], array[j] = _ref[1], _ref;
      };
      return function(array) {
        var i, _i, _ref;
        for (i = _i = _ref = array.length - 1; _ref <= 0 ? _i < 0 : _i > 0; i = _ref <= 0 ? ++_i : --_i) {
          swap(array, i, J.random(i));
        }
        return array;
      };
    })();
    J.binarySearch = function(array, element) {
      var left, middle, right;
      left = 0;
      middle;

      right = array.length - 1;
      while (left <= right) {
        middle = left + ((right - left) >>> 1);
        switch (false) {
          case !(array[middle] < element):
            left = middle + 1;
            break;
          case !(array[middle] > element):
            right = middle - 1;
            break;
          default:
            return middle;
        }
      }
      return -1;
    };
    J.toArray = function(object) {
      return J.map(object, function() {
        return this;
      });
    };
    J.range = function(min, maxInclusive) {
      var i, result, _i, _results;
      if (arguments.length === 1) {
        return J.range(0, min);
      }
      result = [];
      _results = [];
      for (i = _i = min; min <= maxInclusive ? _i < maxInclusive : _i > maxInclusive; i = min <= maxInclusive ? ++_i : --_i) {
        _results.push(result.push(i));
      }
      return _results;
    };
    J.random = function(min, maxInclusive) {
      var possibleNumbers;
      if (arguments.length === 1) {
        return J.random(0, min);
      }
      possibleNumbers = maxInclusive - min + 1;
      return min + Math.floor(Math.random() * possibleNumbers);
    };
    J.randomByte = function() {
      var decimal;
      decimal = J.random(1 << 8);
      return J.padLeft(decimal.toString(16), 2, '0').toUpperCase();
    };
    J.randomColor = function() {
      var b, g, r;
      r = J.randomByte();
      g = J.randomByte();
      b = J.randomByte();
      return "#" + r + g + b;
    };
    J.get = function(url, callback) {
      var request;
      request = new XMLHttpRequest;
      request.onreadystatechange = function() {
        if (request.readyState === 4) {
          if (request.status === 200) {
            return callback.call(request, request.responseText);
          }
        }
      };
      request.open('GET', url);
      return request.send();
    };
    J.now = function() {
      return +(new Date);
    };
    J.prototype.push = function(element) {
      return this[this.length++] = element;
    };
    J.prototype.get = function(index) {
      if (arguments.length === 0) {
        return J.toArray(this);
      } else {
        return this[index];
      }
    };
    J.prototype.size = function() {
      return this.length;
    };
    (function() {
      var extendProto;
      extendProto = function(methodNames, resultFunction) {
        return J.each(methodNames, function() {
          var methodName;
          methodName = this;
          return J.prototype[methodName] = function() {
            var methodArguments, returnedValue;
            methodArguments = J.merge([this], arguments);
            returnedValue = J[methodName].apply(this, methodArguments);
            return resultFunction.call(this, returnedValue);
          };
        });
      };
      (function() {
        var methodNames;
        methodNames = ['each', 'map', 'select', 'any', 'some', 'all', 'every'];
        return extendProto(methodNames, function(returnedValue) {
          return returnedValue;
        });
      })();
      return (function() {
        var methodNames;
        methodNames = ['filter', 'where', 'reject'];
        return extendProto(methodNames, function(returnedValue) {
          return new J(returnedValue);
        });
      })();
    })();
    (function() {
      var events;
      events = ['blur', 'focus', 'focusin', 'focusout', 'load', 'resize', 'scroll', 'unload', 'click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'change', 'select', 'submit', 'keydown', 'keypress', 'keyup', 'error', 'contextmenu'];
      return J.each(events, function() {
        var _this = this;
        return J.prototype[this] = function() {
          var methodArguments;
          methodArguments = J.merge([_this], arguments);
          return J.on(methodArguments);
        };
      });
    })();
    J.prototype.on = function(event, callback) {
      return this.each(function() {
        return this.addEventListener(event, callback);
      });
    };
    J.prototype.mouseenter = function(callback) {
      return this.on('mouseover', callback);
    };
    J.prototype.mouseleave = function(callback) {
      return this.on('mouseout', callback);
    };
    (function() {
      var pairedMethods;
      pairedMethods = {
        prepend: 'prependTo',
        append: 'appendTo',
        before: 'insertBefore',
        after: 'insertAfter'
      };
      return J.each(pairedMethods, function(implementedMethod) {
        return J.prototype[this] = function(elements) {
          elements[implementedMethod](this);
          return this;
        };
      });
    })();
    (function() {
      var eachEach;
      eachEach = function(elements, callback) {
        return this.each(function() {
          var parentElement;
          parentElement = this;
          return elements.each(function() {
            return callback.call(parentElement, this);
          });
        });
      };
      J.prototype.prepend = function(elements) {
        return eachEach.call(this, elements, function(newElement) {
          return this.insertBefore(newElement, this.firstChild);
        });
      };
      J.prototype.append = function(elements) {
        return eachEach.call(this, elements, function(newElement) {
          return this.appendChild(newElement);
        });
      };
      J.prototype.before = function(elements) {
        return eachEach.call(this, elements, function(newElement) {
          return this.parentNode.insertBefore(newElement, this);
        });
      };
      return J.prototype.after = function(elements) {
        return eachEach.call(this, elements, function(newElement) {
          return this.parentNode.insertBefore(newElement, this.nextElementSibling);
        });
      };
    })();
    (function() {
      var filteredMap;
      filteredMap = function(callback) {
        var result;
        result = J.map(this, function() {
          return callback.call(this);
        });
        return J.reject(result, function() {
          return this === null;
        });
      };
      J.prototype.prev = function() {
        var result;
        result = filteredMap.call(this, function() {
          return this.previousElementSibling;
        });
        return new J(result);
      };
      J.prototype.next = function() {
        var result;
        result = filteredMap.call(this, function() {
          return this.nextElementSibling;
        });
        return new J(result);
      };
      J.prototype.parent = function() {
        var result;
        result = filteredMap.call(this, function() {
          return this.parentNode;
        });
        result = J.uniq(result);
        return new J(result);
      };
      return J.prototype.children = function() {
        var result;
        result = [];
        J.each(this, function() {
          return J.merge(result, this.children);
        });
        return new J(result);
      };
    })();
    J.prototype.remove = function() {
      return this.each(function() {
        return this.parentNode.removeChild(this);
      });
    };
    getAttribute = function(attribute) {
      var firstElement;
      firstElement = this[0];
      return firstElement.getAttribute(attribute);
    };
    setAttribute = function(attribute, value) {
      return this.each(function() {
        return this.setAttribute(attribute, value);
      });
    };
    removeAttribute = function(attribute) {
      return this.each(function() {
        return this.removeAttribute(attribute);
      });
    };
    J.prototype.attr = function(attribute, value) {
      if (arguments.length === 1) {
        return getAttribute.call(this, attribute);
      } else {
        return setAttribute.call(this, attribute, value);
      }
    };
    J.prototype.removeAttr = function(attribute) {
      return removeAttribute.call(this, attribute);
    };
    (function() {
      var getData, getDataProperty, hasDataProperty, parseDataAttribute, setData, setDataProperty;
      parseDataAttribute = function(key) {
        var valueString;
        valueString = this.dataset[key];
        if (!(key in this.dataset)) {
          return undefined;
        }
        if (parseFloat(valueString).toString() === valueString) {
          return parseFloat(valueString);
        }
        if (valueString === 'true') {
          return true;
        }
        if (valueString === 'false') {
          return false;
        }
        if (valueString === 'null') {
          return null;
        }
        try {
          return JSON.parse(valueString);
        } catch (e) {
          return valueString;
        }
      };
      hasDataProperty = function(key) {
        return this.data && (key in this.data);
      };
      getDataProperty = function(key) {
        return this.data[key];
      };
      setDataProperty = function(key, value) {
        this.data = this.data || {};
        return this.data[key] = value;
      };
      getData = function(key) {
        var firstElement;
        firstElement = this[0];
        if (hasDataProperty.call(firstElement, key)) {
          return getDataProperty.call(firstElement, key);
        } else {
          return parseDataAttribute.call(firstElement, key);
        }
      };
      setData = function(key, value) {
        return this.each(function() {
          return setDataProperty.call(this, key, value);
        });
      };
      J.prototype.data = function(key, value) {
        if (arguments.length === 1) {
          return getData.call(this, key);
        } else {
          return setData.call(this, key, value);
        }
      };
      return J.prototype.removeData = function(key) {
        return J.prototype.data.call(this, key, undefined);
      };
    })();
    J.prototype.hasClass = function(className) {
      return this.any(function() {
        return this.classList.contains(className);
      });
    };
    J.prototype.addClass = function(className) {
      return this.each(function() {
        return this.classList.add(className);
      });
    };
    J.prototype.removeClass = function(className) {
      return this.each(function() {
        return this.classList.remove(className);
      });
    };
    J.prototype.toggleClass = function(className) {
      return this.each(function() {
        return this.classList.toggle(className);
      });
    };
    (function() {
      var getCss, makeVendorProperty, setCss;
      makeVendorProperty = (function() {
        var style, vendorPrefixes;
        vendorPrefixes = ['Webkit', 'Moz', 'ms', 'O'];
        style = document.createElement('div').style;
        return function(camelCasedProperty) {
          var pascalCasedProperty;
          if (camelCasedProperty in style) {
            return camelCasedProperty;
          }
          pascalCasedProperty = camelCasedProperty[0].toUpperCase() + camelCasedProperty.substr(1);
          vendorProperty;

          J.each(vendorPrefixes, function() {
            var vendorProperty;
            vendorProperty = this + pascalCasedProperty;
            if (vendorProperty in style) {
              return false;
            }
            return vendorProperty = void 0;
          });
          return vendorProperty;
        };
      })();
      getCss = function(property) {
        var firstElement;
        firstElement = this[0];
        return getComputedStyle(firstElement)[property];
      };
      setCss = function(property, value) {
        return this.each(function() {
          return this.style[property] = value;
        });
      };
      return J.prototype.css = function(camelCasedProperty, value) {
        var property;
        property = makeVendorProperty(camelCasedProperty);
        return (arguments.length === 1 ? getCss : setCss).call(this, property, value);
      };
    })();
    (function() {
      var isHidden, showHide;
      isHidden = function() {
        return this.css('display') === 'none';
      };
      showHide = function(show) {
        return this.css('display', (show ? 'block' : 'none'));
      };
      J.prototype.show = function() {
        return showHide.call(this, true);
      };
      J.prototype.hide = function() {
        return showHide.call(this, false);
      };
      return J.prototype.toggle = function() {
        return this.each(function() {
          var self;
          self = new J(this);
          return showHide.call(self, isHidden.call(self));
        });
      };
    })();
    (function() {
      var getText, setText;
      getText = function() {
        var firstElement;
        firstElement = this[0];
        return firstElement.textContent;
      };
      setText = function(text) {
        return this.each(function() {
          return this.textContent = text;
        });
      };
      return J.prototype.text = function(text) {
        return (arguments.length === 0 ? getText : setText).call(this, text);
      };
    })();
    (function() {
      var getHtml, setHtml;
      getHtml = function() {
        var firstElement;
        firstElement = this[0];
        return firstElement.innerHTML;
      };
      setHtml = function(html) {
        return this.each(function() {
          return this.innerHTML = html;
        });
      };
      return J.prototype.html = function(html) {
        return (arguments.length === 0 ? getHtml : setHtml).call(this, html);
      };
    })();
    return J;
  })();

}).call(this);
